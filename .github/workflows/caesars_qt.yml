name: Caesar Backend (CI)

env:
  MIN_SUPPORTED_RUST_VERSION: "1.73.0"

on:
  push:
    paths:
      -  src/caesars/desktop/qt/**
      - .github/workflows/caesars.yml
      - .github/workflows/caesars_qt.yml
  pull_request:
    paths:
      -  src/caesars/desktop/qt/**
      - .github/workflows/caesars.yml
      - .github/workflows/caesars_qt.yml

defaults:
  run:
    working-directory: src/caesars/desktop/qt

jobs:
  code_quality:
    name: Code quality
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install latest just release
        uses: taiki-e/install-action@just

      - name: Ensure `fmt` has been run
        run:  just fmt-check

      - name: Install Qt
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends --allow-unauthenticated \
            qt6-base-dev                                                          \
            qt6-declarative-dev

      - name: Run clippy
        run: just lint

  msrv:
    name: Minimum supported rust version
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}

      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest

      - name: Install latest just release
        uses: taiki-e/install-action@just

      - name: Install Qt
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends --allow-unauthenticated \
            qt6-base-dev                                                          \
            qt6-declarative-dev

      - name: Run tests
        run: just test

  build:
    name: Build for ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { build: linux-gnu,  os: ubuntu-22.04, target: x86_64-unknown-linux-gnu    }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Show version information
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Install musl-tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            --allow-unauthenticated musl-tools

      - name: Install Qt
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends --allow-unauthenticated \
            qt6-base-dev                                                          \
            qt6-declarative-dev

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.target }}

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}
